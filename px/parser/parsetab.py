# type: ignore
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "DELIMITER EQUAL FLOAT INT LPAREN LSQUARE RPAREN RSQUARE STRING UNQUOTED_STRING\n        px : key_value\n           | px key_value\n        \n        key_value : key EQUAL values\n        \n        key : key_with_translation\n            | simple_key\n        \n        simple_key : UNQUOTED_STRING\n        \n        key_with_translation : UNQUOTED_STRING LSQUARE UNQUOTED_STRING RSQUARE\n        \n        key : UNQUOTED_STRING LSQUARE STRING RSQUARE LPAREN STRING RPAREN\n        \n        values : values DELIMITER value\n               | value\n        \n        value : UNQUOTED_STRING\n              | FLOAT\n              | INT\n              | STRING\n        "

_lr_action_items = {
    "UNQUOTED_STRING": (
        [
            0,
            1,
            2,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            18,
            21,
        ],
        [
            6,
            6,
            -1,
            -2,
            12,
            16,
            -3,
            -10,
            -11,
            -12,
            -13,
            -14,
            12,
            -9,
        ],
    ),
    "$end": (
        [
            1,
            2,
            7,
            10,
            11,
            12,
            13,
            14,
            15,
            21,
        ],
        [
            0,
            -1,
            -2,
            -3,
            -10,
            -11,
            -12,
            -13,
            -14,
            -9,
        ],
    ),
    "EQUAL": (
        [
            3,
            4,
            5,
            6,
            19,
            24,
        ],
        [
            8,
            -4,
            -5,
            -6,
            -7,
            -8,
        ],
    ),
    "LSQUARE": (
        [
            6,
        ],
        [
            9,
        ],
    ),
    "FLOAT": (
        [
            8,
            18,
        ],
        [
            13,
            13,
        ],
    ),
    "INT": (
        [
            8,
            18,
        ],
        [
            14,
            14,
        ],
    ),
    "STRING": (
        [
            8,
            9,
            18,
            22,
        ],
        [
            15,
            17,
            15,
            23,
        ],
    ),
    "DELIMITER": (
        [
            10,
            11,
            12,
            13,
            14,
            15,
            21,
        ],
        [
            18,
            -10,
            -11,
            -12,
            -13,
            -14,
            -9,
        ],
    ),
    "RSQUARE": (
        [
            16,
            17,
        ],
        [
            19,
            20,
        ],
    ),
    "LPAREN": (
        [
            20,
        ],
        [
            22,
        ],
    ),
    "RPAREN": (
        [
            23,
        ],
        [
            24,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "px": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "key_value": (
        [
            0,
            1,
        ],
        [
            2,
            7,
        ],
    ),
    "key": (
        [
            0,
            1,
        ],
        [
            3,
            3,
        ],
    ),
    "key_with_translation": (
        [
            0,
            1,
        ],
        [
            4,
            4,
        ],
    ),
    "simple_key": (
        [
            0,
            1,
        ],
        [
            5,
            5,
        ],
    ),
    "values": (
        [
            8,
        ],
        [
            10,
        ],
    ),
    "value": (
        [
            8,
            18,
        ],
        [
            11,
            21,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> px", "S'", 1, None, None, None),
    ("px -> key_value", "px", 1, "p_px", "parser.py", 35),
    ("px -> px key_value", "px", 2, "p_px", "parser.py", 36),
    ("key_value -> key EQUAL values", "key_value", 3, "p_key_value", "parser.py", 45),
    ("key -> key_with_translation", "key", 1, "p_key", "parser.py", 54),
    ("key -> simple_key", "key", 1, "p_key", "parser.py", 55),
    ("simple_key -> UNQUOTED_STRING", "simple_key", 1, "p_simple_key", "parser.py", 63),
    (
        "key_with_translation -> UNQUOTED_STRING LSQUARE UNQUOTED_STRING RSQUARE",
        "key_with_translation",
        4,
        "p_key_with_translation",
        "parser.py",
        77,
    ),
    (
        "key -> UNQUOTED_STRING LSQUARE STRING RSQUARE LPAREN STRING RPAREN",
        "key",
        7,
        "p_key_with_translation_and_stub",
        "parser.py",
        93,
    ),
    ("values -> values DELIMITER value", "values", 3, "p_values", "parser.py", 101),
    ("values -> value", "values", 1, "p_values", "parser.py", 102),
    ("value -> UNQUOTED_STRING", "value", 1, "p_value", "parser.py", 113),
    ("value -> FLOAT", "value", 1, "p_value", "parser.py", 114),
    ("value -> INT", "value", 1, "p_value", "parser.py", 115),
    ("value -> STRING", "value", 1, "p_value", "parser.py", 116),
]
